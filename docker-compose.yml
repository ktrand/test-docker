services:
  nginx:
    image: nginx:1.23.1
    volumes:
      - ./_docker/nginx/conf.d:/etc/nginx/conf.d
      - ./backend:/var/www/backend
      - ./_docker/nginx/logs:/var/log/nginx
      - ./frontend/dist:/usr/share/nginx/html
    ports:
      - "8876:80"
      - "8080:8080"
    container_name: project_nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  backend:
    build:
      context: .
      dockerfile: ./_docker/backend/Dockerfile
    volumes:
      - ./backend:/var/www/backend
    expose:
      - "9000"
    environment:
      - API_PORT=8080
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "php", "-v"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network

  frontend:
    build:
      context: .
      dockerfile: ./_docker/frontend/Dockerfile
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  postgres:
    image: postgres:17.0
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    container_name: project_postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
